{"name": "test_charge[case11]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '金额小数超过两位' == '余额小数超过两位'\n  - 余额小数超过两位\n  ? ^\n  + 金额小数超过两位\n  ? ^", "trace": "self = <test_case.test_charge.TestChargeCase object at 0x000002448F2C8310>\ncase = {'data': {'amount': 600.222, 'member_id': '14'}, 'expected': {'code': 2, 'msg': '金额小数超过两位'}, 'interface': 'recharge', 'method': 'POST', ...}\nset_Up = ('14', 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJfaWQiOjE0LCJleHAiOjE1OTIxMTk2NTJ9.76RUbu49dcNYQ0ZSX0SXVTB2lkTgiGhnGfTkY8FwDEUhBaksXiRdC95Sl6m_Ntyd7MR1wjKkIGBGc4Sf5fWPxg')\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_charge(self, case,set_Up):\n        member_id,token = set_Up\n        # 接口测试需要准备的测试数据 采用拼接的方式，取配置文件中的baseurl + excel中的\n        url = conf.get(\"env\", \"url\") + case[\"url\"]\n        # method\n        print(url)\n        method = case[\"method\"]\n        # data 需要传入用户的id ，excel 中使用 #member_id# 进行站位，需要进行替换\n        # print(case[\"data\"])\n        data = case[\"data\"]\n        if \"#member_id#\" in data.values():\n            data[\"member_id\"] = member_id\n        print(data)\n        # 定义请求头信息\n        headers = eval(conf.get(\"env\", \"headers\"))\n        # headers 从配置文件取出来是一个字典类型\n        headers[\"Authorization\"] = token\n        expected = case[\"expected\"]\n        # 判断用例是否需要db校验，获取充值之前的账户余额是否\n        # 调用requests库发送请求，\n        if \"check_sql\" in case.keys():\n            sql = case[\"check_sql\"].format(member_id)\n            # 获得充值之前的money量\n            # 返回数据类型为dict 因为之前采用了dict游标\n            # 所以可以直接进行取值 leave amount 为可用余额\n            s_money = self.db.find_one(sql)[\"leave_amount\"]\n            print(F\"充值之前的金额为：{s_money}\")\n    \n        # 第二部： 发送请求获取实际结果\n        response = request(url=url, method=method, json=data,\n                           headers=headers)\n        result = response.json()\n        print(F\"预期结果：{expected}\")\n        print(F\"实际结果：{result}\")\n        # 取得返回结果进行断言用例是否通过\n        # 断言预期结果和实际结果\n        ## 判断该用例是否需要db校验，获取充值后的账户余额\n        if \"check_sql\" in case.keys():\n            sql = case[\"check_sql\"].format(member_id)\n            end_money = self.db.find_one(sql)[\"leave_amount\"]\n            print(F\"充值之后的金额{end_money}\")\n        try:\n            assert expected['code'] == result['code']\n            assert expected['msg'] == result['msg']\n    \n            # 还要判断是否进行sql校验DB\n            if \"check_sql\" in case.keys():\n                # 将充值金额转换成decimal类型 db中的类型\n                charge_money = decimal.Decimal(str(data[\"amount\"]))\n                assert charge_money == end_money -s_money\n        except AssertionError as e:\n            # 结果回写excel\n            log.error(\"用例--{}--执行未通过\".format(case[\"title\"]))\n            log.debug(\"预期结果：{}\".format(expected))\n            log.debug(\"实际结果：{}\".format(result))\n            log.exception(e)\n>           raise e\n\ntest_case\\test_charge.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_case.test_charge.TestChargeCase object at 0x000002448F2C8310>\ncase = {'data': {'amount': 600.222, 'member_id': '14'}, 'expected': {'code': 2, 'msg': '金额小数超过两位'}, 'interface': 'recharge', 'method': 'POST', ...}\nset_Up = ('14', 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJfaWQiOjE0LCJleHAiOjE1OTIxMTk2NTJ9.76RUbu49dcNYQ0ZSX0SXVTB2lkTgiGhnGfTkY8FwDEUhBaksXiRdC95Sl6m_Ntyd7MR1wjKkIGBGc4Sf5fWPxg')\n\n    @pytest.mark.parametrize(\"case\",cases)\n    def test_charge(self, case,set_Up):\n        member_id,token = set_Up\n        # 接口测试需要准备的测试数据 采用拼接的方式，取配置文件中的baseurl + excel中的\n        url = conf.get(\"env\", \"url\") + case[\"url\"]\n        # method\n        print(url)\n        method = case[\"method\"]\n        # data 需要传入用户的id ，excel 中使用 #member_id# 进行站位，需要进行替换\n        # print(case[\"data\"])\n        data = case[\"data\"]\n        if \"#member_id#\" in data.values():\n            data[\"member_id\"] = member_id\n        print(data)\n        # 定义请求头信息\n        headers = eval(conf.get(\"env\", \"headers\"))\n        # headers 从配置文件取出来是一个字典类型\n        headers[\"Authorization\"] = token\n        expected = case[\"expected\"]\n        # 判断用例是否需要db校验，获取充值之前的账户余额是否\n        # 调用requests库发送请求，\n        if \"check_sql\" in case.keys():\n            sql = case[\"check_sql\"].format(member_id)\n            # 获得充值之前的money量\n            # 返回数据类型为dict 因为之前采用了dict游标\n            # 所以可以直接进行取值 leave amount 为可用余额\n            s_money = self.db.find_one(sql)[\"leave_amount\"]\n            print(F\"充值之前的金额为：{s_money}\")\n    \n        # 第二部： 发送请求获取实际结果\n        response = request(url=url, method=method, json=data,\n                           headers=headers)\n        result = response.json()\n        print(F\"预期结果：{expected}\")\n        print(F\"实际结果：{result}\")\n        # 取得返回结果进行断言用例是否通过\n        # 断言预期结果和实际结果\n        ## 判断该用例是否需要db校验，获取充值后的账户余额\n        if \"check_sql\" in case.keys():\n            sql = case[\"check_sql\"].format(member_id)\n            end_money = self.db.find_one(sql)[\"leave_amount\"]\n            print(F\"充值之后的金额{end_money}\")\n        try:\n            assert expected['code'] == result['code']\n>           assert expected['msg'] == result['msg']\nE           AssertionError: assert '金额小数超过两位' == '余额小数超过两位'\nE             - 余额小数超过两位\nE             ? ^\nE             + 金额小数超过两位\nE             ? ^\n\ntest_case\\test_charge.py:179: AssertionError"}, "attachments": [{"name": "log", "source": "bdb1a8ca-c8ea-4c8c-a7d6-eecbf4c36c98-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "38466466-10dc-4624-81bc-63ff7d8ce27e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "ce8e27b5-4f58-444b-81bf-f0e5d21d9b36-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'interface': 'recharge', 'title': '充值金额-3位小数', 'method': 'POST', 'url': '/member/recharge', 'data': {'member_id': '#member_id#', 'amount': 600.222}, 'expected': {'code': 2, 'msg': '金额小数超过两位'}}"}], "start": 1592119354178, "stop": 1592119354437, "uuid": "6bd0826b-b60b-4155-8d4c-1729ee3da141", "historyId": "a3ab3b66ddd7abe02e74bd8b97465e8e", "testCaseId": "75329c55a5a1b5c7d66ace80f05e893e", "fullName": "test_case.test_charge.TestChargeCase#test_charge", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_charge"}, {"name": "subSuite", "value": "TestChargeCase"}, {"name": "host", "value": "DESKTOP-JCG0M2F"}, {"name": "thread", "value": "25980-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_charge"}]}